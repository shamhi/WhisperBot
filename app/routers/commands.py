from aiogram import Router, html
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.enums.dice_emoji import DiceEmoji
from aiogram.fsm.context import FSMContext
from app.keyboards import inline_kbs as kb
from app.routers.functions import cmd_functions as fn
from app.db.postgres.storage import PostgresConnection
import structlog
import asyncpg


cmd_router = Router()


@cmd_router.message(CommandStart(), StateFilter(None))
async def cmd_start(message: Message, db_pool: asyncpg.Pool, db_logger: structlog.typing.FilteringBoundLogger):
    db = PostgresConnection(connection_poll=db_pool, logger=db_logger)

    user_id = message.from_user.id
    user_name = message.from_user.username

    await db.register_user(user_id=user_id, name=user_name)

    if message.from_user is None:
        return

    text = f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,</b> <a href="tg://user?id={user_id}">{html.quote(message.from_user.full_name)}</a>\n\n' \
           f'üîä–Ø —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ! üéµ\n\n' \
           f'–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'
    await message.answer(text, reply_markup=kb.start_kb, parse_mode='HTML')
    print(message.contact)

@cmd_router.message(Command('help'), StateFilter(None))
async def cmd_help(message: Message):
    text = f'<b>–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥ –≤ –±–æ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <a href="tg://user?id=1282629807">–µ–º—É</a>.</b>\n\n' \
           f'<b>–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É</>'

    await message.answer(text, reply_markup=kb.start_kb, parse_mode='HTML')


@cmd_router.message(Command('stat'), StateFilter(None))
async def cmd_stat(message: Message):
    stat = fn.get_stat()
    await message.answer(stat, parse_mode='HTML')


@cmd_router.message(Command('game'), StateFilter(None))
async def cmd_game(message: Message):
    # from random import choice
    #
    # dice_list = [DiceEmoji.DICE, DiceEmoji.SLOT_MACHINE, DiceEmoji.DART, DiceEmoji.BOWLING, DiceEmoji.FOOTBALL,
    #              DiceEmoji.BASKETBALL]
    # await message.answer_dice(emoji=choice(dice_list))

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É', reply_markup=kb.choosing_game_kb)


@cmd_router.message(Command('cancel'))
async def cancel_states(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('*–í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã*', parse_mode='markdown')
    text = f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,</b> <a href="tg://user?id={message.from_user.id}">{html.quote(message.from_user.full_name)}</a>\n\n' \
           f'üîä–Ø —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ! üéµ\n\n' \
           f'–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'
    await message.answer(text, reply_markup=kb.start_kb, parse_mode='HTML')


@cmd_router.message(Command('shamhi'))
async def get_users_data(message: Message, db_pool: asyncpg.Pool, db_logger: structlog.typing.FilteringBoundLogger):
    db = PostgresConnection(connection_poll=db_pool, logger=db_logger)

    data_list = await db.get_users_columns()
    text = '\n\n'.join(['\n'.join([f'`{k}` *\\=\\=\\=* `{v}`' for k, v in data.items()]) for data in data_list])
    await message.answer(text=text, parse_mode='markdownv2')
